{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentPrint from \"./ExponentPrint\";\nexport var Orientation = ExponentPrint.Orientation;\nexport function printAsync(_x) {\n  return _printAsync.apply(this, arguments);\n}\nfunction _printAsync() {\n  _printAsync = _asyncToGenerator(function* (options) {\n    if (Platform.OS === 'web') {\n      return yield ExponentPrint.print(options);\n    }\n    if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n      throw new Error('Must provide either `html` or `uri` to print');\n    }\n    if (options.uri && options.html) {\n      throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n    }\n    if (options.markupFormatterIOS !== undefined) {\n      console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n    }\n    return yield ExponentPrint.print(options);\n  });\n  return _printAsync.apply(this, arguments);\n}\nexport function selectPrinterAsync() {\n  return _selectPrinterAsync.apply(this, arguments);\n}\nfunction _selectPrinterAsync() {\n  _selectPrinterAsync = _asyncToGenerator(function* () {\n    if (ExponentPrint.selectPrinter) {\n      return yield ExponentPrint.selectPrinter();\n    }\n    throw new UnavailabilityError('Print', 'selectPrinterAsync');\n  });\n  return _selectPrinterAsync.apply(this, arguments);\n}\nexport function printToFileAsync() {\n  return _printToFileAsync.apply(this, arguments);\n}\nfunction _printToFileAsync() {\n  _printToFileAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return yield ExponentPrint.printToFileAsync(options);\n  });\n  return _printToFileAsync.apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","Platform","ExponentPrint","Orientation","printAsync","_x","_printAsync","apply","arguments","_asyncToGenerator","options","OS","print","uri","html","markupFormatterIOS","Error","undefined","console","warn","selectPrinterAsync","_selectPrinterAsync","selectPrinter","printToFileAsync","_printToFileAsync","length"],"sources":["G:\\Work\\Shenal\\App\\node_modules\\expo-print\\src\\Print.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExponentPrint from './ExponentPrint';\nimport {\n  FilePrintOptions,\n  FilePrintResult,\n  OrientationType,\n  PrintOptions,\n  Printer,\n} from './Print.types';\n\nexport { FilePrintOptions, FilePrintResult, OrientationType, PrintOptions, Printer };\n\n// @needsAudit @docsMissing\n/**\n * The orientation of the printed content.\n */\nexport const Orientation: OrientationType = ExponentPrint.Orientation;\n\n// @needsAudit\n/**\n * Prints a document or HTML, on web this prints the HTML from the page.\n * > Note: On iOS, printing from HTML source doesn't support local asset URLs (due to `WKWebView`\n * > limitations). As a workaround you can use inlined base64-encoded strings.\n * > See [this comment](https://github.com/expo/expo/issues/7940#issuecomment-657111033) for more details.\n * @param options A map defining what should be printed.\n * @return Resolves to an empty `Promise` if printing started.\n */\nexport async function printAsync(options: PrintOptions): Promise<void> {\n  if (Platform.OS === 'web') {\n    return await ExponentPrint.print(options);\n  }\n  if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n    throw new Error('Must provide either `html` or `uri` to print');\n  }\n  if (options.uri && options.html) {\n    throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n  }\n  if (options.markupFormatterIOS !== undefined) {\n    console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n  }\n  return await ExponentPrint.print(options);\n}\n\n// @needsAudit\n/**\n * Chooses a printer that can be later used in `printAsync`\n * @return A promise which fulfils with an object containing `name` and `url` of the selected printer.\n * @platform ios\n */\nexport async function selectPrinterAsync(): Promise<Printer> {\n  if (ExponentPrint.selectPrinter) {\n    return await ExponentPrint.selectPrinter();\n  }\n\n  throw new UnavailabilityError('Print', 'selectPrinterAsync');\n}\n\n// @needsAudit\n/**\n * Prints HTML to PDF file and saves it to [app's cache directory](./filesystem/#filesystemcachedirectory).\n * On Web this method opens the print dialog.\n * @param options A map of print options.\n */\nexport async function printToFileAsync(options: FilePrintOptions = {}): Promise<FilePrintResult> {\n  return await ExponentPrint.printToFileAsync(options);\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAAC,OAAAC,QAAA;AAGxD,OAAOC,aAAa;AAepB,OAAO,IAAMC,WAAW,GAAoBD,aAAa,CAACC,WAAW;AAWrE,gBAAsBC,UAAUA,CAAAC,EAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAc/B,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,CAdM,WAA0BC,OAAqB;IACpD,IAAIT,QAAQ,CAACU,EAAE,KAAK,KAAK,EAAE;MACzB,aAAaT,aAAa,CAACU,KAAK,CAACF,OAAO,CAAC;;IAE3C,IAAI,CAACA,OAAO,CAACG,GAAG,IAAI,CAACH,OAAO,CAACI,IAAI,IAAIb,QAAQ,CAACU,EAAE,KAAK,KAAK,IAAI,CAACD,OAAO,CAACK,kBAAkB,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;;IAEjE,IAAIN,OAAO,CAACG,GAAG,IAAIH,OAAO,CAACI,IAAI,EAAE;MAC/B,MAAM,IAAIE,KAAK,CAAC,sEAAsE,CAAC;;IAEzF,IAAIN,OAAO,CAACK,kBAAkB,KAAKE,SAAS,EAAE;MAC5CC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC;;IAE9F,aAAajB,aAAa,CAACU,KAAK,CAACF,OAAO,CAAC;EAC3C,CAAC;EAAA,OAAAJ,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAQD,gBAAsBY,kBAAkBA,CAAA;EAAA,OAAAC,mBAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA;AAMvC,SAAAa,oBAAA;EAAAA,mBAAA,GAAAZ,iBAAA,CANM,aAAiC;IACtC,IAAIP,aAAa,CAACoB,aAAa,EAAE;MAC/B,aAAapB,aAAa,CAACoB,aAAa,EAAE;;IAG5C,MAAM,IAAItB,mBAAmB,CAAC,OAAO,EAAE,oBAAoB,CAAC;EAC9D,CAAC;EAAA,OAAAqB,mBAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA;AAQD,gBAAsBe,gBAAgBA,CAAA;EAAA,OAAAC,iBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA;AAErC,SAAAgB,kBAAA;EAAAA,iBAAA,GAAAf,iBAAA,CAFM,aAA8D;IAAA,IAA9BC,OAAA,GAAAF,SAAA,CAAAiB,MAAA,QAAAjB,SAAA,QAAAS,SAAA,GAAAT,SAAA,MAA4B,EAAE;IACnE,aAAaN,aAAa,CAACqB,gBAAgB,CAACb,OAAO,CAAC;EACtD,CAAC;EAAA,OAAAc,iBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}