{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { printToFileAsync } from \"expo-print\";\nimport { shareAsync } from \"expo-sharing\";\nimport * as speech from \"expo-speech\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PlantDetailsPage = function PlantDetailsPage(_ref) {\n  var route = _ref.route;\n  var tree = route.params.tree;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isSpeaking = _React$useState2[0],\n    setIsSpeaking = _React$useState2[1];\n  var handleTextToSpeech = function handleTextToSpeech() {\n    if (!isSpeaking) {\n      setIsSpeaking(true);\n      speech.speak(tree.description + \". Scientific name: \" + tree.scName + \". Family: \" + tree.family + \". Order: \" + tree.order + \". Higher Classification: \" + tree.hClass + \". Rank: \" + tree.rank + \". Kingdom: \" + tree.kingdom, {\n        onDone: function onDone() {\n          return setIsSpeaking(false);\n        }\n      });\n    } else {\n      speech.stop();\n      setIsSpeaking(false);\n    }\n  };\n  var html = \"\\n<html>\\n  <body>\\n    <h2>\" + tree.name.toUpperCase() + \"</h2>\\n    <div style=\\\"display: flex; flex-direction: column; align-items: center;\\\">\\n      <img src=\\\"\" + tree.img + \"\\\" alt=\\\"Tree Image\\\" style=\\\"max-width: 50%;\\\" />\\n      <div style=\\\"width: 100%; max-width: 600px;\\\">\\n        <p style=\\\"font-size: 16px; margin-top: 10px;\\\">\" + tree.description + \"</p>\\n        <p style=\\\"font-weight: bold; margin-top: 10px;\\\">Scientific Name:</p>\\n        <p>\" + tree.scName + \"</p>\\n        <p style=\\\"font-weight: bold;\\\">Family:</p>\\n        <p>\" + tree.family + \"</p>\\n        <p style=\\\"font-weight: bold;\\\">Order:</p>\\n        <p>\" + tree.order + \"</p>\\n        <p style=\\\"font-weight: bold;\\\">Higher Classification:</p>\\n        <p>\" + tree.hClass + \"</p>\\n        <p style=\\\"font-weight: bold;\\\">Rank:</p>\\n        <p>\" + tree.rank + \"</p>\\n        <p style=\\\"font-weight: bold;\\\">Kingdom:</p>\\n        <p>\" + tree.kingdom + \"</p>\\n      </div>\\n    </div>\\n  </body>\\n</html>\\n\";\n  var generatedPdf = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var file = yield printToFileAsync({\n        html: html,\n        base64: false\n      });\n      yield shareAsync(file.uri);\n    });\n    return function generatedPdf() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: tree.name.toUpperCase()\n    }), _jsx(Image, {\n      src: tree.img,\n      style: styles.image\n    }), _jsxs(ScrollView, {\n      style: {\n        width: \"100%\"\n      },\n      children: [_jsx(Text, {\n        style: styles.description,\n        children: tree.description\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Scientific Name:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.scName\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Family:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.family\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Order:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.order\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Higher Classification:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.hClass\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Rank:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.rank\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Kingdom:\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: tree.kingdom\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleTextToSpeech,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: isSpeaking ? \"Stop reading\" : \"Read text\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: generatedPdf,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Download PDF\"\n      })\n    })]\n  });\n};\nexport default PlantDetailsPage;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    padding: 16\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginTop: 20\n  },\n  image: {\n    width: 150,\n    height: 150,\n    marginVertical: 25,\n    resizeMode: \"cover\",\n    borderRadius: 8\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 16\n  },\n  subtitle: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    marginTop: 8\n  },\n  text: {\n    fontSize: 14,\n    marginBottom: 8\n  },\n  button: {\n    backgroundColor: \"black\",\n    height: 50,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: 8,\n    marginTop: 16,\n    width: \"100%\"\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"names":["React","View","Text","Image","StyleSheet","TouchableOpacity","SafeAreaView","ScrollView","printToFileAsync","shareAsync","speech","jsx","_jsx","jsxs","_jsxs","PlantDetailsPage","_ref","route","tree","params","_React$useState","useState","_React$useState2","_slicedToArray","isSpeaking","setIsSpeaking","handleTextToSpeech","speak","description","scName","family","order","hClass","rank","kingdom","onDone","stop","html","name","toUpperCase","img","generatedPdf","_ref2","_asyncToGenerator","file","base64","uri","apply","arguments","style","styles","container","children","title","src","image","width","subtitle","text","button","onPress","buttonText","create","flex","alignItems","padding","fontSize","fontWeight","marginTop","height","marginVertical","resizeMode","borderRadius","marginBottom","backgroundColor","justifyContent","color"],"sources":["G:/Work/Shenal/App/src/Views/Info.js"],"sourcesContent":["import React from \"react\";\r\nimport { View, Text, Image, StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport {printToFileAsync} from \"expo-print\";\r\nimport {shareAsync} from \"expo-sharing\";\r\nimport * as speech from \"expo-speech\";\r\n\r\nconst PlantDetailsPage = ({ route }) => {\r\n  const { tree } = route.params;\r\n  const [isSpeaking, setIsSpeaking] = React.useState(false);\r\n\r\n  const handleTextToSpeech = () => {\r\n    if (!isSpeaking) {\r\n      setIsSpeaking(true);\r\n      speech.speak(\r\n        tree.description +\r\n          \". Scientific name: \" +\r\n          tree.scName +\r\n          \". Family: \" +\r\n          tree.family +\r\n          \". Order: \" +\r\n          tree.order +\r\n          \". Higher Classification: \" +\r\n          tree.hClass +\r\n          \". Rank: \" +\r\n          tree.rank +\r\n          \". Kingdom: \" +\r\n          tree.kingdom,\r\n        {\r\n          onDone: () => setIsSpeaking(false),\r\n        }\r\n      );\r\n    } else {\r\n      speech.stop();\r\n      setIsSpeaking(false);\r\n    }\r\n  };\r\n\r\n  const html = `\r\n<html>\r\n  <body>\r\n    <h2>${tree.name.toUpperCase()}</h2>\r\n    <div style=\"display: flex; flex-direction: column; align-items: center;\">\r\n      <img src=\"${tree.img}\" alt=\"Tree Image\" style=\"max-width: 50%;\" />\r\n      <div style=\"width: 100%; max-width: 600px;\">\r\n        <p style=\"font-size: 16px; margin-top: 10px;\">${tree.description}</p>\r\n        <p style=\"font-weight: bold; margin-top: 10px;\">Scientific Name:</p>\r\n        <p>${tree.scName}</p>\r\n        <p style=\"font-weight: bold;\">Family:</p>\r\n        <p>${tree.family}</p>\r\n        <p style=\"font-weight: bold;\">Order:</p>\r\n        <p>${tree.order}</p>\r\n        <p style=\"font-weight: bold;\">Higher Classification:</p>\r\n        <p>${tree.hClass}</p>\r\n        <p style=\"font-weight: bold;\">Rank:</p>\r\n        <p>${tree.rank}</p>\r\n        <p style=\"font-weight: bold;\">Kingdom:</p>\r\n        <p>${tree.kingdom}</p>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n`;\r\n\r\n  const generatedPdf = async () =>{\r\n    const file = await printToFileAsync({\r\n      html: html,\r\n      base64: false,\r\n    });\r\n    await shareAsync(file.uri);\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Text style={styles.title}>{tree.name.toUpperCase()}</Text>\r\n      <Image src={tree.img} style={styles.image} />\r\n      <ScrollView style={{ width: \"100%\" }}>\r\n        <Text style={styles.description}>{tree.description}</Text>\r\n        <Text style={styles.subtitle}>Scientific Name:</Text>\r\n        <Text style={styles.text}>{tree.scName}</Text>\r\n        <Text style={styles.subtitle}>Family:</Text>\r\n        <Text style={styles.text}>{tree.family}</Text>\r\n        <Text style={styles.subtitle}>Order:</Text>\r\n        <Text style={styles.text}>{tree.order}</Text>\r\n        <Text style={styles.subtitle}>Higher Classification:</Text>\r\n        <Text style={styles.text}>{tree.hClass}</Text>\r\n        <Text style={styles.subtitle}>Rank:</Text>\r\n        <Text style={styles.text}>{tree.rank}</Text>\r\n        <Text style={styles.subtitle}>Kingdom:</Text>\r\n        <Text style={styles.text}>{tree.kingdom}</Text>\r\n      </ScrollView>\r\n\r\n      <TouchableOpacity style={styles.button} onPress={handleTextToSpeech}>\r\n        <Text style={styles.buttonText}>\r\n          {isSpeaking ? \"Stop reading\" : \"Read text\"}\r\n        </Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity style={styles.button} onPress={generatedPdf}>\r\n        <Text style={styles.buttonText}>\r\n          Download PDF\r\n        </Text>\r\n      </TouchableOpacity>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsPage;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    padding: 16,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    marginTop: 20,\r\n  },\r\n  image: {\r\n    width: 150,\r\n    height: 150,\r\n    marginVertical: 25,\r\n    resizeMode: \"cover\",\r\n    borderRadius: 8,\r\n  },\r\n  description: {\r\n    fontSize: 16,\r\n    marginBottom: 16,\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n    marginTop: 8,\r\n  },\r\n  text: {\r\n    fontSize: 14,\r\n    marginBottom: 8,\r\n  },\r\n  button: {\r\n    backgroundColor: \"black\",\r\n    height: 50,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 8,\r\n    marginTop: 16,\r\n    width: \"100%\",\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}